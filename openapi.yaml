openapi: 3.0.0
info:
  license: 
    name: aisenz
    url: https://aisenz.com
  title: AISenz ECS
  version: 1.0.0
  description: REST API for AISenz ECS
  contact:
    name: AISenz
    url: https://aisenz.com
    email: dev@aisenz.com
  x-audience: company-internal
servers:
  - url: http://192.168.31.190/api
paths:
  /users/login:
    post:
      tags:
        - users
      summary: user login
      operationId: login
      requestBody:
        description: login user
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
      responses:
        "200":
          description: gateway created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: unexpected error
      security: []

  /rtus:
    get:
      tags:
        - rtus
      summary: List RTUs
      operationId: listRtus
      parameters:
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
        - name: search
          in: query
          schema:
            type: string
            example: abc
        - name: sorted_by
          in: query
          schema:
            type: string
            enum:
              - name.asc
              - name.desc
              - create_time.asc
              - create_time.desc
              - update_time.asc
              - update_time.desc
      responses:
        "200":
          description: List of RTUs
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    format: int32
                    example: 1
                  per_page:
                    type: integer
                    format: int32
                    example: 30
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Rtu"
                  size:
                    type: integer
                    format: int64
                    example: 100
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        default:
          description: Unexpected error
    post:
      tags:
        - rtus
      summary: Create RTU
      operationId: createRtu
      requestBody:
        description: The RTU to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRtu"
      responses:
        "201":
          description: The created RTU
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rtu"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "409":
          $ref: "#/components/responses/ConflictError"
        default:
          description: Unexpected error
  /rtus/{id}:
    parameters:
      - name: id
        in: path
        description: The ID of the RTU to retrieve
        required: true
        schema:
          type: integer
          format: int32
          example: 1
    get:
      tags:
        - rtus
      summary: Get RTU by ID
      operationId: getRtuById
      responses:
        "200":
          description: The requested RTU
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rtu"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          description: Unexpected error
    patch:
      tags:
        - rtus
      summary: Update RTU by ID
      operationId: updateRtuById
      requestBody:
        description: The RTU to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRtu"
      responses:
        "200":
          description: The updated RTU
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Rtu"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          description: Unexpected error
    delete:
      tags:
        - rtus
      summary: Delete RTU by ID
      operationId: deleteRtuById
      responses:
        "204":
          description: RTU deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        default:
          description: Unexpected error
components:
  schemas:
    LoginUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: aisenz.com
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          readOnly: true
          type: string
          example: username
        token:
          readOnly: true
          type: string
          example: eyJhbGciOiJIUzM4NCJ9.eyJ1c2VyX2lkIjoiYWRtaW4iLCJleHAiOjE2NTYzNzUzODZ9.k8iUDHg5iya4NNaQsrEdvgIFPHv2reLg8F5U3Y35OW_BjU8LAnH6rk7huIFskCV7
    Rtu:
      allOf: 
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: RTU ID
              example: 1
            version:
              type: string
              description: RTU 版本号
              nullable: true
              default: ""
              example: 1.0.0
            online:
              type: boolean
              description: RTU 是否在线，必填，值为 TRUE 或 FALSE
            create_time:
              type: integer
              format: int64
              description: RTU 创建时间
              example: 1620000000
            update_time:
              type: integer
              format: int64
              description: RTU 更新时间
              example: 1620000000
        - $ref: "#/components/schemas/UpdateRtu"
    UpdateRtu:
      type: object
      properties:
        name:
          type: string
          description: RTU 名称，不能为空且唯一
          minLength: 1
          maxLength: 255
          example: RTU001
        ip:
          type: string
          description: RTU IP 地址，不能为空且唯一
          format: ipv4
          example: 192.168.1.20
        desc:
          type: string
          description: RTU 描述
          nullable: true
          default: ""
          example: This is RTU001
        addr:
          type: string
          description: RTU 部署位置
          nullable: true
          example: Room 101
        longitude:
          type: number
          format: double
          description: RTU 经度
          nullable: true
          example: 121.48
        latitude:
          type: number
          format: double
          description: RTU 纬度
          nullable: true
          example: 31.22
        stage:
          type: string
          description: RTU 所处阶段
          enum: [NotDeployed, Deployed, Configured]
          example: NotDeployed
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
  responses:
    BadRequestError:
      description: bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnauthorizedError:
      description: access token is missing or invalid
    NotFoundError:
      description: not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ConflictError:
      description: entity already exists
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    
  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        format: int32
        default: 1
    PerPage:
      name: per_page
      in: query
      schema:
        type: integer
        format: int32
        default: 30
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
security:
  - BearerAuth: []
tags:
  - name: users
    description: users
  - name: rtus
    description: rtus